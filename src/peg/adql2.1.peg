// The top-level non-terminal; this is what complete ADQL
// statements must match.
query <- 
	query_expression
	_ EOF;
query_expression <- 
	query_specification;
//	(__ set_operator __ '('? query_expression ')'? )*;
query_specification <- 
	_ 'SELECT'
	(__ set_quantifier)?
	(__ set_limit)?
	__ select_list
	__ table_expression;
table_expression <-
	from_clause 
	(__ where_clause)? 
	(__ group_by)? 
	(__ order_by)? 
	(__ offset)?;
set_operator <-
	('UNION' (__ 'ALL')?) / 'EXCEPT' / 'INTERSECT';
set_quantifier <- 
	'DISTINCT' / 'ALL';
set_limit <-
	'TOP' __ unsigned_integer;
select_list	<-
	'*' /  select_item (_ ',' _ select_item)*;
select_item	<- 
	select_column correlation_specification;
select_column <- 
	operation
	/ numeric_expression
	/ set_function_specification
	/ identifier
	/ math_function
	/ string_function
	/ string_literal
	/ geometry_function;
from_clause	<-
	'FROM' __ from_list;
from_list <- 
	table_item (_ ',' _ table_item)*;
correlation_specification <-
	((_ 'AS')? __ identifier)?;
table_item	<-
	  (subquery / identifier correlation_specification) (__ join_clause correlation_specification (__ join_condition)?)*;
subquery <-
	'(' _ query_expression _ ')' (__ 'AS')? __ identifier;
join_clause <- 
	join_method? 'JOIN' __ table_item;
join_type <-  
	'INNER' / (('LEFT' /  'RIGHT' / 'FULL') __)? 'OUTER';
join_method	<-
	('NATURAL' __)? 
	(join_type __)?;
join_condition	<- 
	'ON' __ '('? _ search_list _ ')'?
	/ 'USING' __ '(' identifier (_ ',' _ identifier)* ')';
where_clause <-
	'WHERE' __ search_list;
search_list	<-
	search_condition (__ ('AND' / 'OR') __ ( 'NOT' __)? search_condition)*;
search_condition <-
	operation
	/ exists_operation
	/ math_function
	/ geometry_function
	/ general_set_function;
search_column <- 
	numeric_expression
	/ math_function
	/ identifier
	/ general_set_function
	/ string_literal
	/ geometry_function;
operation <-
	search_column (__ unary_operation / _ binary_operation / __ ternary_operation / __ list_operation);
unary_operation <-
	'IS' (__ 'NOT')? __ ('TRUE' / 'FALSE' / 'UNKNOWN' / 'NULL');
binary_operation <-
	('NOT' __)? ("||" _ string_literal / ("=" / "!=" / "<=" / ">=" / ">" / "<" / "ILIKE" / "LIKE") _ search_column) (_ binary_operation)*;
ternary_operation <- 
	('NOT' __)? 'BETWEEN' __ search_column __ 'AND' __ search_column;
list_operation <-
	('NOT' __)? 'IN' __ ( regular_identifier  / '(' search_column (_ ',' _ search_column)* ')' / '(' query_expression ')');
exists_operation <-
	('NOT' __)? 'EXISTS' __ '(' query_expression ')';
order_by <-
	'ORDER BY' __ order_by_list;
order_by_list <-
	order_by_item (_ ',' _ order_by_item)*;
order_by_item <- 
	(identifier / unsigned_integer) (__ order_by_sort)?;
order_by_sort <- 
	'ASC' 
	/ 'DESC';
group_by <-
	'GROUP BY' __ group_by_list (__ having_clause)?;
group_by_list <-
	identifier (_ ',' _ identifier)*;
having_clause <-
	'HAVING' __ '('? search_list ')'?;
offset <-
	'OFFSET' __ unsigned_integer;
identifier <-
	((regular_identifier / delimited_identifier) ".")? ((regular_identifier / delimited_identifier) ".")? (regular_identifier / delimited_identifier / '*');
delimited_identifier <-
	'"' ('""' / r'[^"]')+ '"';
regular_identifier <-
	(!(reserved_keywords(!letter)) letter (letter / digit / "_")*);
string_literal <-
	"'" ("''" / r"[^']")* "'"
geometry_function <-
	geometry_value_function
	/ non_predicate_geometry_function 
	/ predicate_geometry_function
	/ region
	/ coordsys;
geometry_value_function <-
	box
	/ centroid
	/ circle
	/ point
	/ polygon;
	// / user_defined_function;
coordinates <-
	numeric_expression _ ',' _ numeric_expression;
box <-
	'BOX' '(' (_ string_literal ',')? _ coordinates _ ',' _ function_param _ ','_ function_param ')';
centroid <-
	'CENTROID' '(' function_param ')';
circle <-
	'CIRCLE' '(' ( _ string_literal _ ',')? _ coordinates _ ',' _ numeric_expression _ ')';
polygon <-
	'POLYGON' '(' ( _ string_literal _ ',')? _ coordinates _ (',' _ coordinates)* ')';
non_predicate_geometry_function <-
	'AREA' '(' _  function_param _ ')'
	/ 'COORD1' '(' _ function_param _ ')'
	/ 'COORD2' '(' _ function_param _ ')'
	/ 'DISTANCE' '(' _ function_param _ ',' _ function_param _ ')'
	/ 'DISTANCE' '(' _ function_param _ ',' function_param _ ',' _ function_param _ ',' _ function_param _ ')';
predicate_geometry_function <-
	contains
	/ intersects;
contains <- 
	'CONTAINS' '(' _ function_param _ ',' _ function_param _ ')';
intersects <-
	'INTERSECTS' '(' _ function_param _ ',' _ function_param _ ')';
region <-
	'REGION' '(' _  string_literal _ ')';
coordsys <-
	'COORDSYS' '(' _ identifier _ ')';
function_param <-
	geometry_function 
	/ numeric_expression 
	/ math_function;
math_function <-
	(onetwo_param_math '(' _ function_param (_ ',' _ signed_integer)? _ ')')
	/ (two_param_math '(' _  function_param _ ',' _ function_param _')')
	/ (one_param_math '(' _ function_param _ ')')
	/ rand_function
	/ (no_param_math '()');
// No params
no_param_math <-
	'PI';
// One param 
one_param_math <-
	'ABS' / 'CEILING' / 'DEGREES' / 'EXP' / 'FLOOR' / 'LOG10' / 'LOG' / 'RADIANS' / 'SQRT' / 'ACOS' / 'ASIN' / 'ATAN' / 'COS' / 'COT' / 'SIN' / 'TAN';
// Two param
two_param_math <-
	'MOD' / 'POWER' / 'ATAN2';
onetwo_param_math <- 
	'ROUND' / 'TRUNCATE';
rand_function <-
	'RAND' '(' unsigned_integer? ')';
string_function <-
	string_func_name '(' search_column ')';
string_func_name <-
	'LOWER';
function_name <-
	'ABS' / 'ACOS' / 'AREA' / 'ASIN' / 'ATAN' / 'ATAN2' / 'BOX' / 'CEILING' / 'CENTROID' / 'CIRCLE' / 'COS' / 'DEGREES' / 'EXP' / 'FLOOR' / 'LOG' / 'LOG10' / 'MOD' / 'PI' / 'POINT' / 'POLYGON' / 'POWER' / 'RADIANS' / 'REGION' / 'RAND' / 'ROUND' / 'SIN' / 'SQRT' / 'TAN';
set_function_specification <-
	'COUNT' '(' ('*' / (set_quantifier __)? identifier) ')' / general_set_function;
set_function_type <-
	'AVG' / 'MAX' / 'MIN' / 'SUM'; 
general_set_function <-
	set_function_type '(' (set_quantifier __)? numeric_expression ')';
point <-
	'POINT' '(' ( _ (string_literal / 'NULL') _ ',')? _ coordinates _ ')';
comment	<-
	'--' r'[^\n\r]*';
comments <-
	(comment EndOfLine)+;
numeric_expression <-
	term (_ ('+' / '-') _ numeric_expression)*;
term <-
	factor (_ ('*' / '/') _ term)*;
factor <-
	('+' / '-')? numeric_primary;
numeric_primary	<-
	numeric_value
	/ identifier;
numeric_value <-
	scientific_number 
	/ decimal 
	/ unsigned_integer;
scientific_number <- 
	(decimal / unsigned_integer) 'E' ('+' / '-')? unsigned_integer;
decimal	<-
	unsigned_integer '.' digit+;
signed_integer <-
	('+' / '-')? unsigned_integer;
unsigned_integer <-
	digit+;
digit <-
	r'[0-9]';
letter <-
	r'[a-zA-Z]';
reserved_keywords <-
	'SELECT' / 'FROM' / 'WHERE' / 'ORDER BY' / 'DISTINCT' / 'ALL' / 'TOP' / 'AS' / 'ASC' / 'DESC' / '=' / '!=' / '<=' / '>=' / '>' / '<' / 'LIKE' / 'ILIKE' / 'OR' / 'AND' / 'JOIN' / 'ON' / 'INNER' / 'OUTER' / 'LEFT' / 'RIGHT' / 'OUTER' / 'NATURAL' / 'ON' / 'USING' / 'OFFSET' / 'GROUP BY' / 'HAVING' / '||' / 'EXISTS' / 'UNKNOWN' / 'NULL' / 'NOT' / 'BIT_AND' / 'BIT_NOT' / 'BIT_OR' / 'BIT_XOR' / 'CONTAINS' / 'COORD1' / 'COORD2' / 'COORDSYS' / 'DISTANCE' / 'INTERSECTS' / 'IN_UNIT' / 'TRUNCATE' /  'COUNT' / function_name / set_function_type / string_func_name ;
ANY_CHAR <-
	letter / digit / ' ' / '\t' / ',' / ';' / '.';
_ <-
	(comment / Space / EOL)*;
__ <-
	(comment / Space / EOL)+;
Space <-
	' '+ / '\t';
EOL <-
	'\r\n' / '\n' / '\r';
