// The top-level non-terminal; this is what complete ADQL
// statements must match.
query			<- 
	query_expression
	_ EOF;
query_expression <- 
	query_specification;
	// / joined_table
query_specification <- _ 'SELECT'
	(__ set_quantifier)?
	(__ set_limit)?
	__ select_list
	__ table_expression;
table_expression <-
	from_clause 
	(__ where_clause)? 
	(__ group_by)? 
	(__ having_clause)? 
	(__ order_by)? 
	(__ offset)?;
set_quantifier <- 'DISTINCT' / 'ALL';
set_limit		<- 'TOP' __ unsigned_integer;
select_list		<- '*' /  select_item (_ ',' _ select_item)*;
select_item		<- select_column (__ ('AS' __)? identifier)?;
select_column		<-  numeric_expression
	/ general_set_function
	/ binary_operation
	/ identifier
	/ math_function
	/ string_function
	/ string_literal;
from_clause		<- 'FROM' __ (from_list / subquery);

from_list		<- table_item (_ ',' _ table_item)*;
table_item		<- (join / identifier) (__ ('AS' __)? identifier)?;
subquery		<- '(' _ query_expression _ ')' (__ 'AS')? __ identifier;
join			<- 
	identifier (__ join_method? 'JOIN' 
	__ '('? (table_item (__ join_condition)? ')'? / query_expression  / _ join _ ')'))+;
join_type <-  
	'INNER' 
	/ (('LEFT' /  'RIGHT' / 'FULL') __)? 'OUTER';
join_method		<-
	('NATURAL' __)? 
	(join_type __)?;
	
join_condition		<- 'ON' __ '('? search_list ')'?
	/ 'USING' __ '(' identifier (_ ',' _ identifier)* ')';

where_clause	<- 'WHERE' __ search_list;
search_list		<- search_condition 
	(__ ('AND' / 'OR') __ ( 'NOT' __)? search_condition)*;
search_condition		<- unary_operation 
	/ binary_operation 
	/ ternary_operation 
	/ list_operation 
	/ exists_operation 
	/ math_function
	/ general_set_function;
search_column		<-  math_function
	/ identifier
	/ general_set_function
	/ string_literal
	/ numeric_expression;
unary_operation 	<- search_column __ 'IS' (__ 'NOT')? __ ('TRUE' / 'FALSE' / 'UNKNOWN' / 'NULL');
binary_operation	<- '('? search_column _ ('NOT' __)? ("||" _ string_literal / ("=" / "!=" / "<=" / ">=" / ">" / "<" / "ILIKE" / "LIKE") _ search_column) ')'?;
ternary_operation	<- search_column __ ('NOT' __)? 'BETWEEN' __ search_column __ 'AND' __ search_column;
list_operation		<- search_column __ ('NOT' __)? 'IN' __ ( regular_identifier  / '(' search_column (_ ',' _ search_column)* ')' / '(' query_expression ')');
exists_operation 	<- ('NOT' __)? 'EXISTS' __ '(' _ query_expression _ ')';
order_by		<- 'ORDER BY' __ order_by_list;
order_by_list		<- order_by_item (_ ',' _ order_by_item)*;
order_by_item		<- (identifier / unsigned_integer) (__ order_by_sort)?;
order_by_sort		<- 'ASC' / 'DESC';
group_by		<- 'GROUP BY' __ group_by_list;
group_by_list 	<- identifier (_ ',' _ identifier)*;
having_clause	<- 'HAVING' __ '('? _ search_list _ ')'?;
offset 			<- 'OFFSET' __ unsigned_integer;
identifier		<- (regular_identifier / delimited_identifier) ("." (regular_identifier / delimited_identifier / '*'))?;
delimited_identifier	<- '"' ('""' / r'[^"]')+ '"';
regular_identifier	<- (!reserved_keywords letter (letter / digit / "_")*);
string_literal 		<- "'" ("''" / r"[^']")+ "'";
function 			<- function_name '(' (search_column (_ ',' _ search_column)*)? ')';
math_function 	<-   (opt_param_math '(' search_column? ')')
	/ (one_param_math '(' search_column ')')
	/ (two_param_math '(' _ search_column ',' _ search_column ')')
	/ (onep_param_math '(' _ search_column (_ ',' _ search_column)* _ ')')
	/ (no_param_math '()');
// No params
no_param_math 	<- 'PI';
// Optional parameter 
opt_param_math 	<- 'RAND';
// One param 
one_param_math 	<- 'ABS' / 'CEILING' / 'DEGREES' / 'EXP' / 'FLOOR' / 'LOG' / 'LOG10' / 'RADIANS' / 'SQRT' / 'ACOS' / 'ASIN' / 'ATAN' / 'COS' / 'COT' / 'SIN' / 'TAN';
// Two param
two_param_math 	<- 'MOD' / 'POWER' / 'ATAN2';
// At least one param
onep_param_math <- 'ROUND' / 'TRUNCATE';
string_function 	<- string_func_name '(' search_column ')';
string_func_name 	<- 'LOWER';
function_name		<- 'ABS' / 'ACOS' / 'AREA' / 'ASIN' / 'ATAN' / 'ATAN2' / 'BOX' / 'CEILING' / 'CENTROID' / 'CIRCLE' / 'COS' / 'DEGREES' / 'EXP' / 'FLOOR' / 'LOG' / 'LOG10' / 'MOD' / 'PI' / 'POINT' / 'POLYGON' / 'POWER' / 'RADIANS' / 'REGION' / 'RAND' / 'ROUND' / 'SIN' / 'SQRT' / 'TAN';
set_function_specification <- 'COUNT' '(*)' / general_set_function;
set_function_type <- 'AVG' / 'MAX' / 'MIN' / 'SUM' / 'COUNT';
general_set_function <- set_function_type '(' (set_quantifier __)? identifier ')';
comment			<- '--' r'[^\n\r]*';
numeric_expression	<- '('? term (_ ('+' / '-') _ numeric_expression)* ')'?;
term			<- '('? factor (_ ('*' / '/') _ term)* ')'?;
factor			<- ('+' / '-')? numeric_primary;
numeric_primary		<- numeric_value / identifier;
numeric_value		<- scientific_number / decimal / unsigned_integer;
scientific_number	<- (decimal / unsigned_integer) 'E' ('+' / '-')? unsigned_integer;
decimal			<- unsigned_integer '.' digit+;
unsigned_integer	<- digit+;
digit			<- r'[0-9]';
letter			<- r'[a-zA-Z]';
reserved_keywords	<- 'SELECT' / 'FROM' / 'WHERE' / 'ORDER BY' / 'DISTINCT' / 'ALL' / 'TOP' / 'AS' / 'ASC' / 'DESC' / '=' / '!=' / '<=' / '>=' / '>' / '<' / 'LIKE' / 'ILIKE' / 'OR' / 'AND' / 'JOIN' / 'ON' / 'INNER' / 'OUTER' / 'LEFT' / 'RIGHT' / 'OUTER' / 'NATURAL' / 'ON' / 'USING' / 'OFFSET' / 'GROUP BY' / 'HAVING' / '||' / 'EXISTS' / 'UNKNOWN' / 'NULL' / 'NOT' / 'BIT_AND' / 'BIT_NOT' / 'BIT_OR' / 'BIT_XOR' / 'CONTAINS' / 'COORD1' / 'COORD2' / 'COORDSYS' / 'DISTANCE' / 'INTERSECTS' / 'IN_UNIT' / 'TRUNCATE' /  'COUNT' / function_name / set_function_type / string_func_name;
ANY_CHAR		<- letter / digit / ' ' / '\t' / ',' / ';' / '.';
_			<- (comment / Space* / EOL*)?;
__			<- (comment / Space / EOL)+;
Space			<- ' '+ / '\t';
EOL			<- '\r\n' / '\n' / '\r';
