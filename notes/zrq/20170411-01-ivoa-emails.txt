#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2017, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


---------------------

ADQL function naming convention

Following a suggestion at the recent ASTERICS TechFroum,
I would like to propose a naming convention
for user defined functions in ADQL.

Apart from avoiding the terms in the list of reserved words,
the ADQL standard itself does not impose any restrictions
on the names that may be used for user defined functions.

To avoid name collisions, particularly when solving common problems,
we should prefix user defined functions
with an acronyn that represents the institute, department
or archive where the function originates.

For example, at the Wide Field Astronomy Unit we would
prefix our user defined functions with 'wfau'

    wfau_align()

    wfau_convert()
 
    wfau_index()

If GAVO did something similar, we could name similar functions
with similar names without conflicts. 

    wfau_align()
    gavo_align()

    wfau_convert()
    gavo_convert()

Note that the prefix indicates the origin of the function
implementation, not the identity of the TAP service
providing the function.

If another TAP servce adopted one of the WFAU function
implementations, they would use the 'wfau' prefix to indicate
the origin of the function implementation.

    wfau_align()

If one of the GAVO functions is adopted as part of an IVOA standard,
then we could use the 'ivo_' prefix to indicate that it is an IVOA
standard fucntion.

    ivo_align()

For backwards compatinbility, TAP services could provide the same
function using different names.

    gavo_align()  -- original version of gavo_align()
    ivo_align()   -- standard version of gavo_align()

The same TAP service could also provide an implementation of WFAU
align() function as well.

    gavo_align()  -- original version of gavo_align()
    wfau_align()  -- uses a different algorithm 
    ivo_align()   -- standard version of gavo_align()


The following table acts as an informal registry of function prefix names.

If you want to participate, add your prefix to the wiki page
or send me an email and I can update it for you.

If you are adding new user defined functions to your TAP services,
consider adding a prefix to the function name to indicate
where the function comes from.

If you already have some user define functions in your TAP services,
introduce alternative names for them with an appropriate prefix
and gradually encourage your users to use the prefixed names.

If this idea is adopted, I may add a line to the ADQL standard
document about it, but it will be an optional suggestion
for people to participate rather than a requirement. 
















 



